/**
 *  Monitor And Set Ecobee Temp
 *
 *  Copyright 2014 Yves Racine
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 * The MonitorAndSetEcobeeTemp monitors the outdoor temp and adjusts the heating and cooling set points 
 * at regular intervals (input parameter in minutes) according to heat/cool thresholds that you set (input parameters).
*/
definition(
    name: "Monitor And Set Ecobee Temp",
    namespace: "yracine",
    author: "Yves Racine",
    description: "Monitor And Set Ecobee Temperature according to outdoor temperature and humidity.",
    category: "My Apps",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")

preferences {

    section("Monitor outdoor temp & set the ecobee thermostat(s) setpoints") {
        input "ecobee", "capability.thermostat", title: "Ecobee?", multiple: true
    }	  
    section("For more heating in cold season, outdoor temp's threshold (default <= 10°F/-15°C)") {
        input "givenMoreHeatThreshold", "decimal", title: "Outdoor temp's threshold for more heating", required:false
    }
    section("For less heating in cold season, outdoor temp's threshold (default >= 50°F/10°C)") {
        input "givenLessHeatThreshold", "decimal", title: "Outdoor temp's threshold for less heating", required:false
    }
    section("For more cooling in hot season, outdoor temp's threshold (default >= 85°F/30°C)") {
        input "givenMoreCoolThreshold", "decimal", title: "Outdoor temp's threshold for more cooling", required:false
    }
    section("For less cooling in hot season, outdoor temp's threshold (default <= 75°F/22°C)") {
        input "givenLessCoolThreshold", "decimal", title: "Outdoor temp's threshold for less cooling", required:false
    }
    section("For more cooling/heating, outdoor humidity's threshold (default >= 85%)") {
        input "givenHumThreshold", "number", title: "Outdoor Relative humidity's threshold for more cooling/heating", required:false
    }
    section("At which interval in minutes (default =59 min.)?"){
        input "givenInterval", "number", required: false
    }
    section("Temp differential for adjustments in Farenheits/Celcius") {
        input "givenTempDiff", "decimal", title: "Temperature adjustment (default= +/-5°F/2°C)", required:false
    }
    section("Choose outdoor Temperature & Humidity sensor to be used for monitoring") {
        input "outdoorSensor", "capability.temperatureMeasurement", title: "Outdoor Temperature Sensor"
        
    }	
    section("What do I use for the Master on/off switch to enable/disable processing? (optional)") {
        input "powerSwitch", "capability.switch", required: false
    }    
    section( "Notifications" ) {
        input "sendPushMessage", "enum", title: "Send a push notification?", metadata:[values:["Yes", "No"]], required: false
        input "phoneNumber", "phone", title: "Send a text message?", required: false
    }
    section("Detailed Notifications") {
        input "detailedNotif", "Boolean", title: "Detailed Notifications?",metadata:[values:["true", "false"]], required:false
    }

}



def installed() {
    initialize()
}

def updated() {
    // we have had an update
    // remove everything and reinstall
    unschedule()
    unsubscribe()
    initialize()
}
def initialize() {
    
    subscribe(ecobee, "heatingSetpoint", ecobeeHeatTempHandler)
    subscribe(ecobee, "coolingSetpoint", ecobeeCoolTempHandler)
    subscribe(ecobee, "humidity", ecobeeHumidityHandler)
    subscribe(ecobee, "temperature", ecobeeTempHandler)
    subscribe(ecobee, "thermostatMode", ecobeeModeHandler)
    subscribe(outdoorSensor, "humidity", outdoorSensorHumHandler)
    subscribe(outdoorSensor, "temperature", outdoorTempHandler)
    subscribe(ecobee, "programType", ecobeeProgramTypeHandler)
    if (powerSwitch != null) {
        subscribe(powerSwitch, "switch.off", offHandler)
        subscribe(powerSwitch, "switch.on", onHandler)
    }
    Integer delay =givenInterval ?: 59   // By default, do it every hour
    log.debug "Scheduling Outdoor temp Monitoring and adjustment every ${delay}  minutes"
    
    schedule("0 0/${delay} * * * ?", monitorAdjustTemp)    // monitor & set indoor temp according to delay specified

}

def ecobeeHeatTempHandler(evt) {
    log.debug "ecobee's heating temp: $evt.value"
}

def ecobeeCoolTempHandler(evt) {
    log.debug "ecobee's cooling temp: $evt.value"
}

def ecobeeHumidityHandler(evt) {
    log.debug "ecobee's humidity level: $evt.value"
}

def ecobeeTempHandler(evt) {
    log.debug "ecobee's temperature level: $evt.value"
}

def ecobeeModeHandler(evt) {
    log.debug "ecobee's mode: $evt.value"
}

def outdoorSensorHumHandler(evt) {
    log.debug "outdoor Sensor's humidity level: $evt.value"
}


def outdoorTempHandler(evt) {
    log.debug "outdoor temperature is: $evt.value"
}

def ecobeeProgramTypeHandler(evt) {
    log.debug "ecobee's program type: $evt.value"
}
def offHandler(evt) {
    log.debug "$evt.name: $evt.value"
}

def onHandler(evt) {
    log.debug "$evt.name: $evt.value"
    monitorAdjustTemp()
}

def monitorAdjustTemp() {


    if (powerSwitch?.currentSwitch == "off") {
       if (detailedNotif == 'true') {
           send("MonitorEcobeeTemp>Virtual master switch ${powerSwitch.name} is off, processing on hold...")
       }
       return
    }

    if (detailedNotif == 'true') {
        Integer delay =givenInterval ?: 59   // By default, do it every hour
        send("MonitorEcobeeTemp>monitoring every ${delay} minute(s)")
    }

//  Polling of the latest values at the thermostat
    ecobee.poll()

    String currentProgType = ecobee.currentProgramType[0]
    log.trace("MonitorEcobeeTemp> program Type= ${currentProgType}")
    if (currentProgType.contains("hold")) {  // don't make any further adustments 
        log.trace("MonitorEcobeeTemp>about to call check_if_hold_justified....")
        if (detailedNotif == 'true') {
            send("MonitorEcobeeTemp>Hold set, checking if still justified")
        }
        check_if_justified_hold()
    }
    else if (!currentProgType.contains("vacation")) {  // don't make adjustment if on vacation mode
        log.trace("MonitorEcobeeTemp>about to call check_if_needs_hold....")
        check_if_needs_hold()
    }
}

private def check_if_needs_hold() {
    float temp_diff                   
    def humidity_threshold = givenHumThreshold ?: 85                       // by default, 85% is the outdoor Humidity's threshold for more cooling
    float more_heat_threshold,more_cool_threshold  
    float less_heat_threshold,less_cool_threshold 
    
    def scale = getTemperatureScale()
    if (scale == 'C') {
        temp_diff = givenTempDiff ?:2                                       // 2°C temp differential is applied by default
        more_heat_threshold = (givenMoreHeatThreshold!=null)? givenMoreHeatThreshold : -15  // by default, -15°C is the outdoor temp's threshold for more heating
        more_cool_threshold = (givenMoreCoolThreshold!=null)? givenMoreCoolThreshold : 30   // by default, 30°C is the outdoor temp's threshold for more cooling
        less_heat_threshold = (givenLessHeatThreshold!=null)? givenLessHeatThreshold : 10   // by default, 10°C is the outdoor temp's threshold for less heating
        less_cool_threshold = (givenLessCoolThreshold!=null)? givenLessCoolThreshold : 22   // by default, 22°C is the outdoor temp's threshold for less cooling
 
    } else {
        more_heat_threshold = (givenMoreHeatThreshold!=null)?givenMoreHeatThreshold : 10    // by default, 10°F is the outdoor temp's threshold for more heating
        more_cool_threshold = (givenMoreCoolThreshold!=null)?givenMoreCoolThreshold : 85    // by default, 85°F is the outdoor temp's threshold for more cooling
        less_heat_threshold = (givenLessHeatThreshold!=null)?givenLessHeatThreshold : 50    // by default, 50°F is the outdoor temp's threshold for less heating
        less_cool_threshold = (givenLessCoolThreshold!=null)?givenLessCoolThreshold : 75    // by default, 75°F is the outdoor temp's threshold for less cooling
    }
    
    log.debug "MonitorEcobeeTemp> location.mode = $location.mode"
    log.debug "MonitorEcobeeTemp> temp_diff = $temp_diff"
    log.debug "MonitorEcobeeTemp> moreHeatThreshold = $more_heat_threshold"
    log.debug "MonitorEcobeeTemp> moreHCoolThreshold = $more_cool_threshold"
    log.debug "MonitorEcobeeTemp> lessHeatThreshold = $less_heat_threshold"
    log.debug "MonitorEcobeeTemp> lessCoolThreshold = $less_cool_threshold"
    float heatTemp = ecobee.currentHeatingSetpoint[0].toFloat()
    float coolTemp = ecobee.currentCoolingSetpoint[0].toFloat()
    def ecobeeHumidity = ecobee.currentHumidity[0]

    def outdoorHumidity = outdoorSensor.currentHumidity
    float outdoorTemp = outdoorSensor.currentTemperature.toFloat()
    String ecobeeMode = ecobee.currentThermostatMode[0]
    log.debug "MonitorEcobeeTemp> ecobee Mode = $ecobeeMode"
    log.debug "MonitorEcobeeTemp> outdoorTemp = $outdoorTemp"
    float targetTstatTemp 
        
    if (ecobeeMode == 'cool') {
                    
        if (location.mode != 'Away') {   // increase cooling settings only if mode != away
            log.trace("MonitorEcobeeTemp>evaluate: moreCoolingThreshold= ${more_cool_threshold} vs. outdoorTemp ${outdoorTemp}°")
            log.trace("MonitorEcobeeTemp>evaluate: moreCoolingThresholdHum= ${humidity_threshold}% vs. outdoorHum ${outdoorHumidity}%")
            if (detailedNotif == 'true') {
                send("MonitorEcobeeTemp>eval:  moreCoolThreshold=${more_cool_threshold}° vs.outdoorTemp ${outdoorTemp}°")
                send("MonitorEcobeeTemp>eval:  moreCoolThresholdHumidty=${humidity_threshold}% vs. outdoorHum ${outdoorHumidity}%")
            }
            if (outdoorTemp >= more_cool_threshold) {
                targetTstatTemp = (coolTemp - temp_diff).round(1)
                ecobee.setCoolingSetpoint(targetTstatTemp)
                send("MonitorEcobeeTemp>cooling setPoint now=${targetTstatTemp.toString()}°,outdooTemp >=${more_cool_threshold}°")
            } else if (outdoorHumidity >= humidity_threshold) {
                targetTstatTemp = (coolTemp - temp_diff).round(1)
                ecobee.setCoolingSetpoint(targetTstatTemp)
                send("MonitorEcobeeTemp>cooling setPoint now=${targetTstatTemp.toString()}°,outdoorHum >=${humidity_threshold}°")
            }
        }    
        log.trace("MonitorEcobeeTemp>evaluate: lessCoolThreshold= ${less_cool_threshold} vs.outdoorTemp ${outdoorTemp}°")
        if (detailedNotif == 'true') {
            send("MonitorEcobeeTemp>evaluate: lessCoolThreshold= ${less_cool_threshold}° vs.outdoorTemp ${outdoorTemp}°")
        }
        if (outdoorTemp <= less_cool_threshold) {
            targetTstatTemp = (coolTemp + temp_diff).round(1)
            ecobee.setCoolingSetpoint(targetTstatTemp)
            send("Monitor&SetEcobeeTemp>cooling setPoint now=${targetTstatTemp.toString()}°,outdoor temp <=${less_cool_threshold}°") 
   
        }         
    } else if (ecobeeMode == 'heat') {
        if (location.mode != 'Away') {   // increase heating settings only if mode != away
            log.trace("MonitorEcobeeTemp>eval: moreHeatingThreshold ${more_heat_threshold}° vs.outdoorTemp ${outdoorTemp}°")
            log.trace("MonitorEcobeeTemp>eval: moreHeatingThresholdHum= ${humidity_threshold}% vs.outdoorHumidity ${outdoorHumidity}%")
            if (detailedNotif == 'true') {
                send("MonitorEcobeeTemp>eval:  moreHeatThreshold ${more_heat_threshold}° vs.outdoorTemp ${outdoorTemp}°")
                send("MonitorEcobeeTemp>eval:  moreHeatThresholdHumidty=${humidity_threshold}% vs.outdoorHum ${outdoorHumidity}%")
            }
            if (outdoorTemp <= more_heat_threshold) {
                targetTstatTemp = (heatTemp + temp_diff).round(1)
                ecobee.setHeatingSetpoint(targetTstatTemp)
                send("MonitorEcobeeTemp>heating setPoint now= ${targetTstatTemp.toString()}°,outdoorTemp <=${more_heat_threshold}°") 
            } else if (outdoorHumidity >= humidity_threshold) {
                targetTstatTemp = (heatTemp + temp_diff).round(1)
                ecobee.setHeatingSetpoint(targetTstatTemp)
                send("MonitorEcobeeTemp>heating setPoint now= ${targetTstatTemp.toString()}°,outdoorHum >=${humidity_threshold}%") 
            }
        }    
        log.trace("MonitorEcobeeTemp>eval:lessHeatThreshold=${less_heat_threshold}° vs.outdoorTemp ${outdoorTemp}°")
        if (detailedNotif == 'true') {
            send("MonitorEcobeeTemp>eval:  lessHeatThreshold=${less_heat_threshold}° vs.outdoorTemp ${outdoorTemp}°")
        }
        if (outdoorTemp >= less_heat_threshold) {
            targetTstatTemp = (heatTemp - temp_diff).round(1)
            ecobee.setHeatingSetpoint(targetTstatTemp)
            send("MonitorEcobeeTemp>heating setPoint now=${targetTstatTemp.toString()}°,outdoor temp>= ${less_heat_threshold}°") 
        }
    }
            
    log.debug "End of Fcn check_if_needs_hold"
}

private def check_if_justified_hold() {
    def humidity_threshold = givenHumThreshold ?: 85                       // by default, 85% is the outdoor Humidity's threshold for more cooling
    float more_heat_threshold,more_cool_threshold  
    float less_heat_threshold,less_cool_threshold 
    
    def scale = getTemperatureScale()
    if (scale == 'C') {
        more_heat_threshold = (givenMoreHeatThreshold!=null)? givenMoreHeatThreshold : -15  // by default, -15°C is the outdoor temp's threshold for more heating
        more_cool_threshold = (givenMoreCoolThreshold!=null)? givenMoreCoolThreshold : 30   // by default, 30°C is the outdoor temp's threshold for more cooling
        less_heat_threshold = (givenLessHeatThreshold!=null)? givenLessHeatThreshold : 10   // by default, 10°C is the outdoor temp's threshold for less heating
        less_cool_threshold = (givenLessCoolThreshold!=null)? givenLessCoolThreshold : 22   // by default, 22°C is the outdoor temp's threshold for less cooling
 
    } else {
        more_heat_threshold = (givenMoreHeatThreshold!=null)?givenMoreHeatThreshold : 10    // by default, 10°F is the outdoor temp's threshold for more heating
        more_cool_threshold = (givenMoreCoolThreshold!=null)?givenMoreCoolThreshold : 85    // by default, 85°F is the outdoor temp's threshold for more cooling
        less_heat_threshold = (givenLessHeatThreshold!=null)?givenLessHeatThreshold : 50    // by default, 50°F is the outdoor temp's threshold for less heating
        less_cool_threshold = (givenLessCoolThreshold!=null)?givenLessCoolThreshold : 75    // by default, 75°F is the outdoor temp's threshold for less cooling
    }
    log.debug "MonitorEcobeeTemp> location.mode = $location.mode"
    log.debug "MonitorEcobeeTemp> moreHeatThreshold = $more_heat_threshold"
    log.debug "MonitorEcobeeTemp> moreHCoolThreshold = $more_cool_threshold"
    log.debug "MonitorEcobeeTemp> lessHeatThreshold = $less_heat_threshold"
    log.debug "MonitorEcobeeTemp> lessCoolThreshold = $less_cool_threshold"
    def heatTemp = ecobee.currentHeatingSetpoint[0]
    def coolTemp = ecobee.currentCoolingSetpoint[0]
    def ecobeeHumidity = ecobee.currentHumidity[0]

    def outdoorHumidity = outdoorSensor.currentHumidity
    float outdoorTemp = outdoorSensor.currentTemperature.toFloat()
    String ecobeeMode = ecobee.currentThermostatMode[0]
    log.debug "MonitorEcobeeTemp> ecobee Mode = $ecobeeMode"
    log.debug "MonitorEcobeeTemp> outdoorTemp = $outdoorTemp"
    
    if (ecobeeMode == 'cool') {
                    
        log.trace("MonitorEcobeeTemp>evaluate: moreCoolingThreshold=${more_cool_threshold} vs. outdoorTemp ${outdoorTemp}°")
        log.trace("MonitorEcobeeTemp>evaluate: moreCoolingThresholdHum= ${humidity_threshold}% vs. outdoorHum ${outdoorHumidity}%")
        log.trace("MonitorEcobeeTemp>evaluate: lessCoolThreshold= ${less_cool_threshold} vs.outdoorTemp ${outdoorTemp}°")
        if (detailedNotif == 'true') {
            send("MonitorEcobeeTemp>eval:  moreCoolThreshold=${more_cool_threshold}° vs.outdoorTemp ${outdoorTemp}°")
            send("MonitorEcobeeTemp>eval:  lessCoolThreshold=${less_cool_threshold}° vs.outdoorTemp ${outdoorTemp}°")
            send("MonitorEcobeeTemp>eval:  moreCoolThresholdHum= ${humidity_threshold}% vs. outdoorHum ${outdoorHumidity}%")
        }
        if ((outdoorTemp > more_cool_threshold) && (outdoorHumidity < humidity_threshold)) {
            ecobee.resumeThisTsat()
            send("MonitorEcobeeTemp>resuming program,outdoorTemp <=${more_cool_threshold}°")
        } else if ((outdoorTemp < less_cool_threshold)  && (outdoorHumidity < humidity_threshold)) {
            ecobee.resumeThisTsat()
            send("MonitorEcobeeTemp>resuming program,outdoorTemp >=${more_less_threshold}°")
        } else if (outdoorHumidity < humidity_threshold) {
            ecobee.resumeThisTstat()
            send("MonitorEcobeeTemp>resuming program,outdoorHumidity <${humidity_threshold}%")
        } else {
            if (detailedNotif == 'true') {
                send("MonitorEcobeeTemp>Hold justified, cooling setPoint=${coolTemp}°")
            }
        }
    } else if (ecobeeMode == 'heat') {
        log.trace("MonitorEcobeeTemp>eval: moreHeatingThreshold ${more_heat_threshold}° vs.outdoorTemp ${outdoorTemp}°")
        log.trace("MonitorEcobeeTemp>evaluate: moreHeatingThresholdHum= ${humidity_threshold}% vs. outdoorHum ${outdoorHumidity}%")
        log.trace("MonitorEcobeeTemp>eval:lessHeatThreshold=${less_heat_threshold}° vs.outdoorTemp ${outdoorTemp}°")
        if (detailedNotif == 'true') {
            send("MonitorEcobeeTemp>eval: moreHeatThreshold ${more_heat_threshold}° vs.outdoorTemp ${outdoorTemp}°")
            send("MonitorEcobeeTemp>eval: lessHeatThreshold=${less_heat_threshold}° vs.outdoorTemp ${outdoorTemp}°")
            send("MonitorEcobeeTemp>eval: moreHeatThresholdHum= ${humidity_threshold}% vs. outdoorHum ${outdoorHumidity}%")
        }
        if ((outdoorTemp  > more_heat_threshold)  && (outdoorHumidity < humidity_threshold)) {
            ecobee.resumeThisTstat()
            send("MonitorEcobeeTemp>resuming program,outdoorTemp <${more_heat_threshold}°")
        } else if ((outdoorTemp > less_heat_threshold) && (outdoorHumidity < humidity_threshold)) {
            ecobee.resumeThisTstat()
            send("MonitorEcobeeTemp>resuming program,outdoorTemp >${less_heat_threshold}°")
        } else if (outdoorHumidity < humidity_threshold) {
            ecobee.resumeThisTstat()
            send("MonitorEcobeeTemp>resuming program,outdoorHumidity <${humidity_threshold}%")
        } else {
            if (detailedNotif == 'true') {
                send("MonitorEcobeeTemp>Hold justified, heating setPoint=${heatTemp}°")
            }    
        }
    }
    log.debug "End of Fcn check_if_hold_justified"
}


private send(msg) {
    if ( sendPushMessage != "No" ) {
        log.debug( "sending push message" )
        sendPush( msg )
       
    }

    if ( phoneNumber ) {
        log.debug( "sending text message" )
        sendSms( phoneNumber, msg )
    }

    log.debug msg
}


// catchall
def event(evt) {
     log.debug "value: $evt.value, event: $evt, settings: $settings, handlerName: ${evt.handlerName}"
}

def cToF(temp) {
    return (temp * 1.8 + 32)
}
 
def fToC(temp) {
    return (temp - 32) / 1.8
}
