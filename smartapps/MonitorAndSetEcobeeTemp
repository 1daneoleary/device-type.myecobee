/**
 *  Monitor And Set Ecobee Temp
 *
 *  Copyright 2014 Yves Racine
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 * The MonitorAndSetEcobeeTemp monitors the outdoor temp and adjusts the heating and cooling set points 
 * at regular intervals (input parameter in minutes) according to heat/cool thresholds that you set (input parameters).
*/
definition(
    name: "Monitor And Set Ecobee Temp",
    namespace: "yracine",
    author: "Yves Racine",
    description: "Monitor And Set Ecobee Temperature according to outdoor temperature and humidity.",
    category: "My Apps",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")

preferences {

    section("Monitor ourdoor temp & set the ecobee thermostat(s) setpoints") {
        input "ecobee", "capability.thermostat", title: "Ecobee?", multiple: true
    }	  
    section("For more heating, outdoor temp's threshold (default <= 10°F/-5°C)") {
        input "givenMoreHeatThreshold", "decimal", title: "Outdoor temp's threshold for more heating", required:false
    }
    section("For more cooling, outdoor temp's threshold (default >= 85°F/30°C)") {
        input "givenMoreCoolThreshold", "decimal", title: "Outdoor temp's threshold for more cooling", required:false
    }
    section("For more cooling/heating, outdoor humidity's threshold (default >= 65%)") {
        input "givenHumThreshold", "number", title: "Outdoor Relative humidity's threshold for more cooling/heating", required:false
    }
    section("For less heating, outdoor temp's threshold (default >= 50°F/10°C)") {
        input "givenLessHeatThreshold", "decimal", title: "Outdoor temp's threshold for less heating", required:false
    }
    section("For less cooling, outdoor temp's threshold (default <= 75°F/22°C)") {
        input "givenLessCoolThreshold", "decimal", title: "Outdoor temp's threshold for less cooling", required:false
    }
    section("At which interval in minutes (default =59 min.)?"){
        input "givenInterval", "number", required: false
    }
    section("Temp differential for adjustments in Farenheits/Celcius") {
        input "givenTempDiff", "decimal", title: "Temperature adjustment (default= +/- 5°F/2°C)", required:false
    }
    section("Choose Outdoor Temperature & Humidity sensor to be used for monitoring") {
        input "outdoorSensor", "capability.temperatureMeasurement", title: "Outdoor Temperature Sensor"
        
    }	
    section( "Notifications" ) {
        input "sendPushMessage", "enum", title: "Send a push notification?", metadata:[values:["Yes", "No"]], required: false
        input "phoneNumber", "phone", title: "Send a text message?", required: false
    }
	section("Detailed Notifications") {
        input "detailedNotif", "Boolean", title: "Detailed Notifications?",metadata:[values:["true", "false"]], required:false
	}
    

}



def installed() {
    initialize()
}

def updated() {
    // we have had an update
    // remove everything and reinstall
    unschedule()
    unsubscribe()
    initialize()
}

def initialize() {
    
    subscribe(ecobee, "heatingSetpoint", ecobeeHeatTempHandler)
    subscribe(ecobee, "coolingSetpoint", ecobeeCoolTempHandler)
    subscribe(ecobee, "humidity", ecobeeHumidityHandler)
    subscribe(ecobee, "temperature", ecobeeTempHandler)
    subscribe(ecobee, "thermostatMode", ecobeeModeHandler)
    subscribe(ecobee, "programType", ecobeeProgramTypeHandler)
    subscribe(outdoorSensor, "humidity", outdoorSensorHumHandler)
    subscribe(outdoorSensor, "temperature", outdoorTempHandler)
    Integer delay =givenInterval ?: 59   // By default, do it every hour
    log.debug "Scheduling Outdoor temp Monitoring and adjustment every ${delay}  minutes"
    
    schedule("0 0/${delay} * * * ?", monitorAdjustTemp)    // monitor & set indoor temp according to delay specified

}
def ecobeeHeatTempHandler(evt) {
    log.debug "ecobee's heating temp: $evt.value"
}

def ecobeeCoolTempHandler(evt) {
    log.debug "ecobee's cooling temp: $evt.value"
}

def ecobeeHumidityHandler(evt) {
    log.debug "ecobee's humidity level: $evt.value"
}

def ecobeeTempHandler(evt) {
    log.debug "ecobee's temperature level: $evt.value"
}

def ecobeeModeHandler(evt) {
    log.debug "ecobee's mode: $evt.value"
}
def ecobeeProgramTypeHandler(evt) {
    log.debug "ecobee's program type: $evt.value"
}
def outdoorSensorHumHandler(evt) {
    log.debug "outdoor Sensor's humidity level: $evt.value"
}
def outdoorTempHandler(evt) {
    log.debug "Outdoor temperature is: $evt.value"
}

def monitorAdjustTemp() {

    float temp_diff                   
    def humidity_threshold = givenHumThreshold ?: 65                       // by default, 65% is the outdoor Humidity's threshold for more cooling
    def more_heat_threshold,more_cool_threshold = givenMoreCoolThreshold 
    def less_heat_threshold,less_cool_threshold 
    
    def scale = getTemperatureScale()
    if (scale == 'C') {
        temp_diff = givenTempDiff ?:2                                      // 2°C temp differential is applied by default
        more_heat_threshold = givenMoreHeatThreshold ?: -5                 // by default, -5°C is the outdoor temp's threshold for more heating
        more_cool_threshold = givenMoreCoolThreshold ?: 30                 // by default, 30°C is the outdoor temp's threshold for more cooling
        less_heat_threshold = givenLessHeatThreshold ?: 10                 // by default, 10°C is the outdoor temp's threshold for less heating
        less_cool_threshold = givenLessCoolThreshold ?: 22                 // by default, 22°C is the outdoor temp's threshold for less cooling
 
    } else {
        more_heat_threshold = givenMoreHeatThreshold ?: 10                 // by default, 10°F is the outdoor temp's threshold for more heating
        more_cool_threshold = givenMoreCoolThreshold ?: 85                 // by default, 85°F is the outdoor temp's threshold for more cooling
        less_heat_threshold = givenLessHeatThreshold ?: 50                 // by default, 50°F is the outdoor temp's threshold for less heating
        less_cool_threshold = givenLessCoolThreshold ?: 75                 // by default, 75°F is the outdoor temp's threshold for less cooling
    }
    
    log.debug "monitorAndSetEcobeeTemp> location.mode = $location.mode"

//  Polling of the latest values at the thermostat
    ecobee.poll()

    def currentProgramType = ecobee.currentProgramType
    if (currentProgramType == "Hold") {  // don't make any further adustments 
        log.trace("monitorAndSetEcobeeTemp>Hold set, no more adjustments")
        return
    }
    
    float heatTemp = ecobee.currentHeatingSetpoint
    float coolTemp = ecobee.currentCoolingSetpoint
    def ecobeeTemp = ecobee.currentTemperature

    def outdoorHumidity = outdoorSensor.currentHumidity
    float outdoorTemp = outdoorSensor.currentTemperature
    def ecobeeMode = ecobee.currentThermostatMode
    float targetTstatTemp 
        
    if (ecobeeMode == 'cool') {
            
        if (location.mode != 'Away') {   // increase cooling settings only if mode != away
            log.trace("monitorAndSetEcobeeTemp>evaluate: more Cooling Threshold= ${more_cool_threshold} vs. outdoor Temp ${outdoorTemp}")
            log.trace("monitorAndSetEcobeeTemp>evaluate: more Cooling Threshold Humidity= ${humidity_threshold} vs. outdoor Humidity ${outdoorHumidity}%")
            if ((outdoorTemp >= more_cool_threshold) || (outdoorHumidity >= humidity_threshold)) {
                targetTstatTemp = (coolTemp-temp_diff).round(1)
                ecobee.setCoolingSetpoint(targetTstatTemp)
                if (detailedNotif == 'true') {
                    send("monitorAndSetEcobeeTemp>cooling setPoint is now ${targetTstatTemp.toString()}°,outdoor temp>= ${more_cool_threshold}°")
                }
            }
        }    
        log.trace("monitorAndSetEcobeeTemp>evaluate: less Cooling Threshold= ${less_cool_threshold} vs. outdoor Temp ${outdoorTemp}")
        if (outdoorTemp <= less_cool_threshold) {
            targetTstatTemp = (coolTemp+temp_diff).round(1)
            ecobee.setCoolingSetpoint(targetTstatTemp)
            if (detailedNotif == 'true') {
                send("monitorAndSetEcobeeTemp>cooling setPoint is now ${targetTstatTemp.toString()}°,outdoor temp<= ${less_cool_threshold}°") 
            }
   
        }         
    } else if (ecobeeMode == 'heat') {
        if (location.mode != 'Away') {   // increase heating settings only if mode != away
            log.trace("monitorAndSetEcobeeTemp>evaluate: more Heating Threshold ${more_heat_threshold}° vs. outdoor Temp ${outdoorTemp}°")
            log.trace("monitorAndSetEcobeeTemp>evaluate: more Heating Threshold Humidity= ${humidity_threshold} vs. outdoor Humidity ${outdoorHumidity}")
            if ((outdoorTemp <= more_heat_threshold) || (outdoorHumidity >= humidity_threshold)) {
                targetTstatTemp = (heatTemp+temp_diff).round(1)
                ecobee.setHeatingSetpoint(targetTstatTemp)
                if (detailedNotif == 'true') {
                    send("monitorAndSetEcobeeTemp>heating setPoint is now ${targetTstatTemp.toString()}°,outdoor temp<= ${more_heat_threshold}°F") 
                }
            }
        }    
        log.trace("monitorAndSetEcobeeTemp>evaluate: less Heating Threshold ${less_heat_threshold}° vs. outdoor Temp ${outdoorTemp}°")
        if (outdoorTemp >= less_heat_threshold) {
            targetTstatTemp = (heatTemp-temp_diff).round(1)
            ecobee.setHeatingSetpoint(targetTstatTemp)
            if (detailedNotif == 'true') {
                send("monitorAndSetEcobeeTemp>heating setPoint is now ${targetTstatTemp.toString()}°,outdoor temp>= ${less_heat_threshold}°") 
            }
        }
    }
            
    log.debug "End of Fcn"
}


private send(msg) {
    if ( sendPushMessage != "No" ) {
        log.debug( "sending push message" )
        sendPush( msg )
       
    }

    if ( phoneNumber ) {
        log.debug( "sending text message" )
        sendSms( phoneNumber, msg )
    }

    log.debug msg
}


// catchall
def event(evt) {
     log.debug "value: $evt.value, event: $evt, settings: $settings, handlerName: ${evt.handlerName}"
}

def cToF(temp) {
    return (temp * 1.8 + 32)
}
 
def fToC(temp) {
    return (temp - 32) / 1.8
}
