/**
 *  ecobeeSetClimate
 *
 *  Copyright 2014 Yves Racine
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "ecobeeSetClimate",
    namespace: "yracine",
    author: "Yves Racine",
    description: "This script allows an ecobee user to set a Climate at a given day & time",
    category: "My Apps",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")



preferences {
    section("Set the ecobee thermostat(s)") {
        input "ecobee", "capability.thermostat", title: "Which ecobee thermostat(s)?", multiple:true

    }
    section("To this program/climate (default=Home)") {
        input "givenClimate", "string", title: "Climate?", required: false
    }


    section("Configuration") {
        input "dayOfWeek", "enum",
            title: "Which day of the week?",
            multiple: false,
            metadata: [
                values: [
                    'All Week',
                    'Monday to Friday',
                    'Saturday & Sunday',
                    'Monday',
                    'Tuesday',
                    'Wednesday',
                    'Thursday',
                    'Friday',
                    'Saturday',
                    'Sunday'
                ]
            ]
        input "begintime", "time", title: "Beginning time"
    }

    section("Notifications") {
        input "sendPushMessage", "enum", title: "Send a push notification?", metadata: [values: ["Yes", "No"]], required: false
        input "phoneNumber", "phone", title: "Send a text message?", required: false
    }

}



def installed() {
    // subscribe to these events
    initialize()
}

def updated() {
    // we have had an update
    // remove everything and reinstall
    unschedule()
    initialize()
}

def initialize() {

    log.debug "Scheduling setClimate for day " + dayOfWeek + " at begin time " + begintime
    subscribe(ecobee, "heatingSetpoint", heatingSetpointHandler)
    subscribe(ecobee, "thermostatMode", thermostatModeHandler)
    subscribe(ecobee, "temperature", temperatureHandler)

    schedule(begintime, setClimate)

}
def thermostatModeHandler(evt) {
    log.debug "thermostat Mode: $evt, $settings"
}


def heatingSetpointHandler(evt) {
    log.debug "heatingSetpoint: $evt, $settings"
}

def temperatureHandler(evt) {
    log.debug "temperatureHandler: $evt, $settings"
}



def setClimate() {
	def climateName= (givenClimateName ?: 'Home').capitalize()

	
    def doChange = IsRightDayForChange()

    // If we have hit the condition to schedule this then lets do it

    if (doChange == true) {
        log.debug "setTheTemp, location.mode = $location.mode, newMode = $newMode, location.modes = $location.modes"
	
    	ecobee.setClimate("", climateName)
        send("ecobeeSetClimate>set ecobee thermostat(s) to ${climateName} program as requested")
    } else {
        log.debug "climate change to ${climateName} not scheduled for today."
    }
    log.debug "End of Fcn"
}


def IsRightDayForChange() {

    def makeChange = false
    Calendar localCalendar = Calendar.getInstance(TimeZone.getDefault());
    int currentDayOfWeek = localCalendar.get(Calendar.DAY_OF_WEEK);

    // Check the condition under which we want this to run now
    // This set allows the most flexibility.
    if (dayOfWeek == 'All Week') {
        makeChange = true
    } else if ((dayOfWeek == 'Monday' || dayOfWeek == 'Monday to Friday') && currentDayOfWeek == Calendar.instance.MONDAY) {
        makeChange = true
    } else if ((dayOfWeek == 'Tuesday' || dayOfWeek == 'Monday to Friday') && currentDayOfWeek == Calendar.instance.TUESDAY) {
        makeChange = true
    } else if ((dayOfWeek == 'Wednesday' || dayOfWeek == 'Monday to Friday') && currentDayOfWeek == Calendar.instance.WEDNESDAY) {
        makeChange = true
    } else if ((dayOfWeek == 'Thursday' || dayOfWeek == 'Monday to Friday') && currentDayOfWeek == Calendar.instance.THURSDAY) {
        makeChange = true
    } else if ((dayOfWeek == 'Friday' || dayOfWeek == 'Monday to Friday') && currentDayOfWeek == Calendar.instance.FRIDAY) {
        makeChange = true
    } else if ((dayOfWeek == 'Saturday' || dayOfWeek == 'Saturday & Sunday') && currentDayOfWeek == Calendar.instance.SATURDAY) {
        makeChange = true
    } else if ((dayOfWeek == 'Sunday' || dayOfWeek == 'Saturday & Sunday') && currentDayOfWeek == Calendar.instance.SUNDAY) {
        makeChange = true
    }


    // some debugging in order to make sure things are working correclty
    log.debug "Calendar DOW: " + currentDayOfWeek
    log.debug "SET DOW: " + dayOfWeek

    return makeChange
}


private send(msg) {
    if (sendPushMessage != "No") {
        log.debug("sending push message")
        sendPush(msg)
    }

    if (phoneNumber) {
        log.debug("sending text message")
        sendSms(phoneNumber, msg)
    }

    log.debug msg
}



// catchall
def event(evt) {
    log.debug "value: $evt.value, event: $evt, settings: $settings, handlerName: ${evt.handlerName}"
}
